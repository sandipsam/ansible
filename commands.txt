https://www.eventbrite.com/e/chief-software-architect-100kyr-online-hiring-tournament-100-remote-registration-43700597664?aff=HTRog
https://www.katacoda.com/jonatanblue/scenarios/1
ansible_commands: 

echo "[group1]" > myhosts

echo "host01 ansible_ssh_user=ubuntu" >> myhosts

ansible-playbook -i myhosts site.yml

vi file_name: edit/create a file. Press i for insert mode, Esc to come out of insert mode, :wq to save the file and exit from vi editor, :q! to exit from vi editor without saving the file.
rm -rf dir_name: remove non-empty directory forcefully
emacs filename.txt ---unix create file
touch filename.txt -- linux create file

-----
cat > myfile.txt

Now, just type whatever you want in the file:

Hello World!

CTRL-D to save and exit
--------------

ansible-playbook playbooks/PLAYBOOK_NAME.yml --limit "host1,host2"
ansible-playbook playbooks/PLAYBOOK_NAME.yml --limit 'all:!host1'

ansible host01 -i myhosts -m setup

---------------------------

---

  - name: install postgre and nginx

    hosts: all

    sudo: true
    
    gather_facts: no

    tasks:

      - name: nginx

        apt: pkg=nginx state=installed update_cache=yes cache_valid_time=604800

        notify: start nginx

      - name: postgresql

        apt: pkg=postgresql state=installed update_cache=yes cache_valid_time=604800

        notify: start postgresql

    handlers:

      - name: start nginx

        service: name=nginx enabled=yes state=started

      - name: start postgresql

        service: name=postgresql enabled=yes state=started

...

---

  - name: Configuring Nginx

    hosts: all

    sudo: true

    tasks:

      - name: Install Nginx

        apt: pkg=nginx state=present update_cache=yes cache_valid_time=604800

      - name: Ensure Nginx is running

        service: name=nginx enabled=yes state=started
    
  - name: Configuring PostgreSQL

    hosts: all

    sudo: true

    tasks:   
    
      - name: Install PostgreSQL
      
        apt: pkg=postgresql state=present update_cache=yes cache_valid_time=604800

      - name: Ensure PostgreSQL is running

        service: name=postgresql enabled=yes state=started

...


---
[back-end-and-infra:children]
back-end-servers
infrastructure

[back-end-servers]
database ansible_host=10.0.0.1 ansible_port=22 ansible_user=postgres
webserver ansible_host=10.0.0.2 ansible_port=22 ansible_user=root

[infrastructure]
ldap ansible_host=10.0.0.100 ansible_port=22 ansible_user=root

...
-------------------------------------------
#host variables

[group1]

host1 http_port=80 

host2 http_port=303

host3



#group variables

[group1:vars]

ntp_server= example.com

proxy=proxy.example.com
---------------------------------


A Role has following folders:

Files

Handlers

Meta

Templates

Vars

Defaults


------------------

mkdir roles , cd roles , mkdir sample_role, cd sample_role, mkdir defaults files handlers tasks templates vars

#file: tasks/nginx.yml

---

- name: Installs nginx

  apt: pkg=nginx state=installed update_cache=true   

  notify: 

    - start nginx
######

#file: handlers/main.yml

---

- name: start nginx

  service: name=nginx state=started
####   Tasks, Handlers, and Vars folder always have main.yml file

#file: tasks/main.yml

---

- include: nginx.yml

- include: copy-static.yml

- include: copy-template.yml
##############

#file: master_playbook.yml   -- at root folder   When you run this playbook, the Role will first check main.yml file in tasks folder and execute tasks.
---

- name: my first role in ansible

  hosts: all

  sudo: yes 

  roles:

    - sample_role
###########


#file: ansible.cfg

[defaults]
host_key_checking=False
roles_path = /home/scrapbook/tutorial/roles/
[ssh_connection]
ssh_args =

```
# file: tasks/copy-static.yml

---

- name: Copy a file

  copy: src=some-file.txt dest=/home/ubuntu/file1.txt
...

#Let us create a file in files folder: touch some-file.txt
------------------------------
#file: templates/template-file.j2

this is {{item}}
-------------------------

#file: vars/main.yml

var_x:

  - 'variable x'

var_y:

  - 'variable y'
----------------------
#file: tasks/copy-template.yml

---

- name: sample template - x

  template:

    src: template-file.j2

    dest: /home/ubuntu/copy-template-file.j2

  with_items: var_x
--------------------------
